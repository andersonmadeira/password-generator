{"version":3,"sources":["utils/index.ts","components/index.ts","components/checkbox/index.tsx","components/copy-button/index.tsx","components/result/index.tsx","components/slider/index.tsx","components/copy-button/styles.ts","components/button/styles.ts","components/checkbox/styles.ts","components/slider/styles.ts","components/card/styles.ts","components/result/styles.ts","app/styles.ts","app/index.tsx","hooks/useRevealAnimation.ts","styles/global-styles.tsx","reportWebVitals.ts","index.tsx","styles/theme.ts"],"names":["Alphabets","availableAlphabets","label","value","Lowercase","Uppercase","Numeric","Symbols","combineAlphabets","alphabets","reduce","acc","alphabet","getRandomPassword","options","result","i","length","charAt","Math","floor","random","console","log","getRandomChar","copyToClipboard","text","inputElem","document","createElement","body","appendChild","focus","select","execCommand","removeChild","Checkbox","checked","onChange","useState","isChecked","setIsChecked","type","className","React","memo","CopyButton","onClick","viewBox","d","Result","displayText","Slider","min","max","val","setVal","step","event","newValue","target","CopyButtonStyled","styled","button","SvgIcon","svg","props","theme","colors","primary","Button","primaryDark","disabled","CheckboxLabel","primaryLight","SliderStyled","input","Card","div","ResultCard","InputGroup","Container","Title","h1","SubTitle","h2","GenerateButton","App","password","setPassword","animation","setOptions","combinedAlphabets","setCombinedAlphabets","temporaryText","setTemporaryText","useEffect","charIndex","shuffleInterval","setInterval","clearInterval","newTemporaryText","Array","map","empty","join","useRevealAnimation","role","aria-label","newAlphabets","filter","a","GlobalStyles","styles","css","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"oIAAO,IAAKA,EAAZ,0K,SAAYA,K,uCAAAA,E,uCAAAA,E,qBAAAA,E,4CAAAA,M,KAYL,IAAMC,EAA2C,CACtD,CACEC,MAAO,kBACPC,MAAOH,EAAUI,WAEnB,CACEF,MAAO,kBACPC,MAAOH,EAAUK,WAEnB,CACEH,MAAO,gBACPC,MAAOH,EAAUM,SAEnB,CACEJ,MAAO,mBACPC,MAAOH,EAAUO,UAURC,EAAmB,SAACC,GAAD,OAC9BA,EAAUC,QAAO,SAACC,EAAKC,GAAN,OAAmBD,EAAMC,IAAU,KAE/C,SAASC,EAAkBC,GAIhC,IAHA,IAAMF,EAAWJ,EAAiBM,EAAQL,WACtCM,EAAS,GAEJC,EAAI,EAAGA,EAAIF,EAAQG,OAAQD,IAClCD,GAAUH,EAASM,OAAOC,KAAKC,MAAMD,KAAKE,SAAWT,EAASK,SAKhE,OAFAK,QAAQC,IAAI,WAAYR,GAEjBA,EAGF,IAAMS,EAAgB,SAACZ,GAAD,OAC3BA,EAASM,OAAOC,KAAKC,MAAMD,KAAKE,SAAWT,EAASK,UAE/C,SAASQ,EAAgBC,GAC9B,IAAMC,EAAYC,SAASC,cAAc,SACzCF,EAAUxB,MAAQuB,EAClBE,SAASE,KAAKC,YAAYJ,GAE1BA,EAAUK,QACVL,EAAUM,SAEVL,SAASM,YAAY,QAErBN,SAASE,KAAKK,YAAYR,K,6BClE5B,+O,wECKMS,G,MAAoC,SAAC,GAIpC,IAHLlC,EAGI,EAHJA,MAGI,IAFJmC,eAEI,SADJC,EACI,EADJA,SACI,EAC8BC,mBAASF,GADvC,mBACGG,EADH,KACcC,EADd,KAGJ,OACE,eAAC,IAAD,WACGvC,EACD,uBACEwC,KAAK,WACLL,QAASG,EACTF,SAAU,WACRG,GAAcD,GAEVF,GAAUA,GAAUE,MAG5B,sBAAMG,UAAU,6BAOPC,cAAMC,KAAKT,I,yGCzBbU,G,MAAwC,SAAC,GAAD,IACnDpB,EADmD,EACnDA,KADmD,IAEnDxB,aAFmD,MAE3C,OAF2C,SAInD,eAAC,IAAD,CAAkB6C,QAAS,kBAAMtB,YAAgBC,IAAjD,UACE,cAAC,IAAD,CAASsB,QAAQ,YAAjB,SACE,sBAAMC,EAAE,qYAEV,sBAAMN,UAAU,qBAAhB,SAAsCzC,U,6ECP7BgD,G,MAAgC,SAAC,GAAD,IAAGxB,EAAH,EAAGA,KAAMyB,EAAT,EAASA,YAAT,OAC3CA,EACE,eAAC,IAAD,WACE,cAAC,aAAD,CAAYzB,KAAMA,IACjByB,KAED,OAISP,cAAMC,KAAKK,I,uECZbE,G,MAAgC,SAAC,GAKvC,IAAD,IAJJC,WAII,MAJE,EAIF,MAHJC,WAGI,MAHE,IAGF,MAFJnD,aAEI,MAFI,GAEJ,EADJmC,EACI,EADJA,SACI,EACkBC,mBAASpC,GAD3B,mBACGoD,EADH,KACQC,EADR,KAGJ,OACE,cAAC,IAAD,CACEd,KAAK,QACLW,IAAKA,EACLC,IAAKA,EACLG,KAAK,IACLtD,MAAOoD,EACPjB,SAAU,SAAAoB,GACR,IAAMC,GAAYD,EAAME,OAAOzD,MAC/BqD,EAAOG,GACHrB,GAAUA,EAASqB,QAQhBf,cAAMC,KAAKO,I,syBC7BnB,IAAMS,EAAmBC,IAAOC,OAAV,KAwBhBC,EAAUF,IAAOG,IAAV,KAQR,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,OAAOC,WAI1B,SAAAH,GAAK,OAAIA,EAAMC,MAAMC,OAAOC,Y,4qBCpCnC,IAAMC,E,KAASR,EAAOC,OAAV,KAcH,SAAAG,GAAK,OAAIA,EAAMC,MAAMC,OAAOC,WAC1B,SAAAH,GAAK,OAAIA,EAAMC,MAAMC,OAAOC,WAQ5B,SAAAH,GAAK,OAAIA,EAAMC,MAAMC,OAAOG,eAI5B,SAAAL,GAAK,OAAIA,EAAMC,MAAMC,OAAOI,a,mxCC3BvC,IAAMC,E,KAAgBX,EAAO5D,MAAV,KA4CA,SAAAgE,GAAK,OAAIA,EAAMC,MAAMC,OAAOM,gBAI5B,SAAAR,GAAK,OAAIA,EAAMC,MAAMC,OAAOC,WAG1B,SAAAH,GAAK,OAAIA,EAAMC,MAAMC,OAAOG,gB,6rCCnDjD,IAAMI,E,KAAeb,EAAOc,MAAV,KA+BL,SAAAV,GAAK,OAAIA,EAAMC,MAAMC,OAAOC,WAiB5B,SAAAH,GAAK,OAAIA,EAAMC,MAAMC,OAAOC,Y,0eChDzC,IAAMQ,EAAOf,IAAOgB,IAAV,K,wGCEV,IAAMC,EAAajB,YAAOe,EAAPf,CAAH,M,2rBCDhB,IAAMkB,EAAalB,IAAOgB,IAAV,KAIVG,EAAYnB,IAAOgB,IAAV,KAMTI,EAAQpB,IAAOqB,GAAV,KAKLC,EAAWtB,IAAOuB,GAAV,KAKRC,EAAiBxB,YAAOQ,SAAPR,CAAH,KCL3B,IAwEeyB,EAxEO,WAAO,IAAD,EACMhD,mBAAS,IADf,mBACnBiD,EADmB,KACTC,EADS,OAEIlD,mBAA4B,CACxD9B,UAAW,GACXQ,OAAQ,GACRyE,WAAW,IALa,mBAEnB5E,EAFmB,KAEV6E,EAFU,OAOwBpD,mBAAS,IAPjC,mBAOnBqD,EAPmB,KAOAC,EAPA,KAQlBC,ECbH,YAG2C,IAFhDlF,EAE+C,EAF/CA,SACAc,EAC+C,EAD/CA,KAC+C,EACLa,mBAAS,IADJ,mBACxCuD,EADwC,KACzBC,EADyB,KA4B/C,OAzBAC,qBAAU,WACR,IAAIC,EAAY,EAEhB,GAAIvE,EAAM,CACR,IAAMwE,EAAkBC,aAAY,WAClC,GAAIF,EAAYvE,EAAKT,OACnBmF,cAAcF,OADhB,CAKA,IAAMG,EAAmB,YAAI,IAAIC,MAAM5E,EAAKT,SACzCsF,KAAI,SAACC,EAAOxF,GAAR,OACHA,EAAIiF,EAAYvE,EAAKV,GAAKQ,YAAcZ,MAEzC6F,KAAK,IAERV,EAAiBM,GAEjBJ,OACC,IAEH,OAAO,kBAAMG,cAAcF,OAE5B,CAACxE,EAAMd,IAEH,CACLkF,iBDnBwBY,CAAmB,CAC3C9F,SAAUgF,EACVlE,KAAM8D,IAFAM,cASR,OAJAE,qBAAU,WACRH,EAAqBrF,YAAiBM,EAAQL,cAC7C,CAACK,EAAQL,YAGV,eAACwE,EAAD,WACE,eAACC,EAAD,WACE,sBAAMyB,KAAK,MAAMC,aAAW,WAA5B,0BADF,6BAMA,eAACxB,EAAD,sBAAmBtE,EAAQG,OAA3B,OACA,cAAC,SAAD,CACEd,MAAOW,EAAQG,OACfqB,SAAU,SAACrB,GAAD,OACR0E,GAAW,SAAA7E,GAAO,kCAAUA,GAAV,IAAmBG,iBAGzC,cAACmE,EAAD,0BACCnF,IAAmBsG,KAAI,SAAA3F,GAAQ,OAC9B,cAACoE,EAAD,UACE,cAAC,WAAD,CACE9E,MAAOU,EAASV,MAChBoC,SAAU,SAACD,GACT,IAAMwE,EAAexE,EAAO,sBACpBvB,EAAQL,WADY,CACDG,EAAST,QAChCW,EAAQL,UAAUqG,QAAO,SAAAC,GAAC,OAAIA,IAAMnG,EAAST,SAEjDwF,GAAW,SAAA7E,GAAO,kCAAUA,GAAV,IAAmBL,UAAWoG,WARrCjG,EAASV,UAa5B,cAACkF,EAAD,uBACA,cAACJ,EAAD,UACE,cAAC,WAAD,CACE9E,MAAM,YACNoC,SAAU,SAACD,GAAD,OACRsD,GAAW,SAAA7E,GAAO,kCAAUA,GAAV,IAAmB4E,UAAWrD,QAElDA,SAAO,MAGX,cAACiD,EAAD,CACE5C,KAAK,SACL8B,SAAuC,IAA7B1D,EAAQL,UAAUQ,OAC5B8B,QAAS,kBAAM0C,EAAY5E,YAAkBC,KAH/C,sBAOA,cAAC,SAAD,CACEY,KAAM8D,EACNrC,YAAarC,EAAQ4E,UAAYI,EAAgBN,Q,scEjFlD,IAAMwB,EAAyB,kBACpC,cAAC,IAAD,CACEC,OAAQC,YAAF,QCSKC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,eAAC,IAAD,CAAe3D,MCRS,CAC1BC,OAAQ,CACNC,QAAS,UACTK,aAAc,UACdH,YAAa,UACbC,SAAU,YDGV,UACE,cAAC,EAAD,IACA,cAAC,EAAD,SAGJ5C,SAASmG,eAAe,SAM1BZ,M","file":"static/js/main.352ca19d.chunk.js","sourcesContent":["export enum Alphabets {\n  Lowercase = 'abcdefghijklmnopqrstuvwxyz',\n  Uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',\n  Numeric = '0123456789',\n  Symbols = '!@#$%&*()_`Â´{[^~]};:/?<>,.=-+',\n}\n\nexport type AlphabetDescriptor = {\n  label: string\n  value: Alphabets\n}\n\nexport const availableAlphabets: AlphabetDescriptor[] = [\n  {\n    label: 'Lowercase (a-z)',\n    value: Alphabets.Lowercase,\n  },\n  {\n    label: 'Uppercase (A-Z)',\n    value: Alphabets.Uppercase,\n  },\n  {\n    label: 'Numbers (0-9)',\n    value: Alphabets.Numeric,\n  },\n  {\n    label: 'Symbols (*!@%_#)',\n    value: Alphabets.Symbols,\n  },\n]\n\nexport type GenerationOptions = {\n  alphabets: Alphabets[]\n  length: number\n  animation: boolean\n}\n\nexport const combineAlphabets = (alphabets: Alphabets[]): string =>\n  alphabets.reduce((acc, alphabet) => acc + alphabet, '')\n\nexport function getRandomPassword(options: GenerationOptions): string {\n  const alphabet = combineAlphabets(options.alphabets)\n  let result = ''\n\n  for (let i = 0; i < options.length; i++) {\n    result += alphabet.charAt(Math.floor(Math.random() * alphabet.length))\n  }\n\n  console.log('Result: ', result)\n\n  return result\n}\n\nexport const getRandomChar = (alphabet: string): string =>\n  alphabet.charAt(Math.floor(Math.random() * alphabet.length))\n\nexport function copyToClipboard(text: string): void {\n  const inputElem = document.createElement('input')\n  inputElem.value = text\n  document.body.appendChild(inputElem)\n\n  inputElem.focus()\n  inputElem.select()\n\n  document.execCommand('copy')\n\n  document.body.removeChild(inputElem)\n}\n","export * from './button'\nexport * from './checkbox'\n\nexport * from './checkbox'\nexport { default as Checkbox } from './checkbox'\n\nexport * from './copy-button'\nexport { default as CopyButton } from './copy-button'\n\nexport * from './result'\nexport { default as Result } from './result'\n\nexport * from './slider'\nexport { default as Slider } from './slider'\n","import React, { useState } from 'react'\n\nimport { CheckboxLabel } from './styles'\nimport { CheckboxProps } from './types'\n\nconst Checkbox: React.FC<CheckboxProps> = ({\n  label,\n  checked = false,\n  onChange,\n}) => {\n  const [isChecked, setIsChecked] = useState(checked)\n\n  return (\n    <CheckboxLabel>\n      {label}\n      <input\n        type=\"checkbox\"\n        checked={isChecked}\n        onChange={() => {\n          setIsChecked(!isChecked)\n\n          if (onChange) onChange(!isChecked)\n        }}\n      />\n      <span className=\"checkbox__checkmark\"></span>\n    </CheckboxLabel>\n  )\n}\n\nexport * from './types'\n\nexport default React.memo(Checkbox)\n","import React from 'react'\n\nimport { copyToClipboard } from '../../utils'\nimport { CopyButtonStyled, SvgIcon } from './styles'\nimport { CopyButtonProps } from './types'\n\nexport const CopyButton: React.FC<CopyButtonProps> = ({\n  text,\n  label = 'copy',\n}) => (\n  <CopyButtonStyled onClick={() => copyToClipboard(text)}>\n    <SvgIcon viewBox=\"0 0 20 20\">\n      <path d=\"M17.391,2.406H7.266c-0.232,0-0.422,0.19-0.422,0.422v3.797H3.047c-0.232,0-0.422,0.19-0.422,0.422v10.125c0,0.232,0.19,0.422,0.422,0.422h10.125c0.231,0,0.422-0.189,0.422-0.422v-3.797h3.797c0.232,0,0.422-0.19,0.422-0.422V2.828C17.812,2.596,17.623,2.406,17.391,2.406 M12.749,16.75h-9.28V7.469h3.375v5.484c0,0.231,0.19,0.422,0.422,0.422h5.483V16.75zM16.969,12.531H7.688V3.25h9.281V12.531z\"></path>\n    </SvgIcon>\n    <span className=\"copy-button__label\">{label}</span>\n  </CopyButtonStyled>\n)\n\nexport * from './types'\n\nexport default React.memo(CopyButton)\n","import React from 'react'\nimport { Card } from '../card'\n\nimport { CopyButton } from '../copy-button'\nimport { ResultProps } from './types'\nimport { ResultCard } from './styles'\n\nexport const Result: React.FC<ResultProps> = ({ text, displayText }) =>\n  displayText ? (\n    <ResultCard>\n      <CopyButton text={text} />\n      {displayText}\n    </ResultCard>\n  ) : null\n\nexport * from './types'\n\nexport default React.memo(Result)\n","import React, { useState } from 'react'\n\nimport { SliderStyled } from './styles'\nimport { SliderProps } from './types'\n\nexport const Slider: React.FC<SliderProps> = ({\n  min = 1,\n  max = 250,\n  value = 25,\n  onChange,\n}) => {\n  const [val, setVal] = useState(value)\n\n  return (\n    <SliderStyled\n      type=\"range\"\n      min={min}\n      max={max}\n      step=\"1\"\n      value={val}\n      onChange={event => {\n        const newValue = +event.target.value\n        setVal(newValue)\n        if (onChange) onChange(newValue)\n      }}\n    />\n  )\n}\n\nexport * from './types'\n\nexport default React.memo(Slider)\n","import styled from '@emotion/styled'\n\nexport const CopyButtonStyled = styled.button`\n  position: absolute;\n  top: 8px;\n  left: 8px;\n  border: none;\n  background: none;\n  outline: none;\n  cursor: pointer;\n  font: 1em Rubik, sans-serif;\n  text-transform: uppercase;\n  color: #757575;\n  padding: 3px 10px;\n  opacity: 0.4;\n  transition: all 0.5s ease;\n\n  & .copy-button__icon {\n    margin-right: 0.4em;\n  }\n\n  &:hover {\n    opacity: 0.7;\n  }\n`\n\nexport const SvgIcon = styled.svg`\n  width: 1em;\n  height: 1em;\n  margin-right: 0.4em;\n\n  path,\n  polygon,\n  rect {\n    fill: ${props => props.theme.colors.primary};\n  }\n\n  circle {\n    stroke: ${props => props.theme.colors.primary};\n    stroke-width: 1;\n  }\n`\n","import styled from '@emotion/styled'\n\nexport const Button = styled.button`\n  font-size: 1.2em;\n\n  color: #fff;\n  font-weight: 700;\n\n  border: none;\n  border-radius: 2px;\n  height: 40px;\n  padding-left: 20px;\n  padding-right: 20px;\n  display: inline-block;\n\n  box-shadow: 0 6px 16px 0 rgba(67, 184, 201, 0.2);\n  background: ${props => props.theme.colors.primary};\n  border-color: ${props => props.theme.colors.primary};\n\n  outline: none;\n  cursor: pointer;\n\n  transition: all 0.5s ease;\n\n  &:hover {\n    background: ${props => props.theme.colors.primaryDark};\n  }\n\n  &:disabled {\n    background: ${props => props.theme.colors.disabled};\n    cursor: not-allowed;\n  }\n`\n","import styled from '@emotion/styled'\n\nexport const CheckboxLabel = styled.label`\n    display: inline-block;\n    position: relative;\n    padding-left: 30px;\n    margin-bottom: 12px;\n    cursor: pointer;\n    user-select: none;\n\n    font-size: 1.2em;\n\n    .checkbox__checkmark {\n      position: absolute;\n      top: 0;\n      left: 0;\n      height: 20px;\n      width: 20px;\n      background-color: #fff;\n      border-radius: 2px;\n      box-shadow: 0 3px 10px 0 rgba(0, 0, 0, 0.1);\n      transition: all 0.5s ease;\n\n      &:after {\n        content: '';\n        position: absolute;\n        display: none;\n        left: 6px;\n        top: 2px;\n        width: 5px;\n        height: 10px;\n        border: solid white;\n        border-width: 0 3px 3px 0;\n        transform: rotate(45deg);\n      }\n    }\n\n    input {\n      position: absolute;\n      opacity: 0;\n      cursor: pointer;\n      height: 0;\n      width: 0;\n    }\n\n    &:hover input ~ .checkbox__checkmark {\n      background-color: ${props => props.theme.colors.primaryLight};\n    }\n\n    input:checked ~ .checkbox__checkmark {\n      background-color: ${props => props.theme.colors.primary};\n\n      &:hover {\n        background-color: ${props => props.theme.colors.primaryDark};\n      }\n\n      &:after {\n        display: block;\n      }\n    }\n  }\n`\n","import styled from '@emotion/styled'\n\nexport const SliderStyled = styled.input`\n  -webkit-appearance: none;\n  width: 100%;\n  height: 8px;\n  border-radius: 5px;\n  background: #d3d3d3;\n  outline: none;\n  opacity: 0.7;\n  -webkit-transition: 0.2s;\n  transition: opacity 0.2s;\n\n  &:hover {\n    opacity: 1;\n  }\n\n  &::-webkit-slider-thumb {\n    -webkit-appearance: none;\n    appearance: none;\n    width: 20px;\n    height: 20px;\n    border-radius: 50%;\n    background: #fff;\n    border-width: 3px;\n    border-color: #afafaf;\n    border-style: solid;\n    cursor: pointer;\n    transition: border-width 200ms ease-in-out, border-color 200ms ease-in-out;\n  }\n\n  &::-webkit-slider-thumb:hover {\n    border-width: 4px;\n    border-color: ${props => props.theme.colors.primary};\n  }\n\n  &::-moz-range-thumb {\n    width: 20px;\n    height: 20px;\n    border-radius: 50%;\n    background: #fff;\n    border-width: 3px;\n    border-color: #afafaf;\n    border-style: solid;\n    cursor: pointer;\n    transition: border-width 200ms ease-in-out, border-color 200ms ease-in-out;\n  }\n\n  &::-moz-range-thumb:hover {\n    border-width: 4px;\n    border-color: ${props => props.theme.colors.primary};\n  }\n`\n","import styled from '@emotion/styled'\n\nexport const Card = styled.div`\n  font-size: 1.5em;\n  font-family: monospace;\n  background-color: #fff;\n  box-shadow: rgba(184, 194, 215, 0.35) 0px 6px 9px 0px;\n  border-radius: 8px;\n  padding: 32px;\n  position: relative;\n  margin-top: 20px;\n  overflow-wrap: break-word;\n  transition: box-shadow 0.4s ease-in-out 0s,\n    background-color 0.4s ease-in-out 0s;\n`\n","import styled from '@emotion/styled'\n\nimport { Card } from '../card'\n\nexport const ResultCard = styled(Card)`\n  padding: 46px 32px 25px 32px;\n`\n","import styled from '@emotion/styled'\nimport { Button } from '../components'\n\nexport const InputGroup = styled.div`\n  display: block;\n`\n\nexport const Container = styled.div`\n  max-width: 550px;\n  margin: 0 auto;\n  padding: 0 20px 20px 20px;\n`\n\nexport const Title = styled.h1`\n  font-size: 2em;\n  margin: 0.75em 0 1em;\n`\n\nexport const SubTitle = styled.h2`\n  font-size: 1.3em;\n  margin: 1em 0 0.75em;\n`\n\nexport const GenerateButton = styled(Button)`\n  margin-top: 1em;\n`\n","import React, { useState, useEffect } from 'react'\n\nimport {\n  getRandomPassword,\n  GenerationOptions,\n  combineAlphabets,\n  availableAlphabets,\n} from '../utils'\nimport { Slider, Checkbox, Result } from '../components'\nimport {\n  Container,\n  InputGroup,\n  Title,\n  SubTitle,\n  GenerateButton,\n} from './styles'\nimport { useRevealAnimation } from '../hooks'\n\nconst App: React.FC = () => {\n  const [password, setPassword] = useState('')\n  const [options, setOptions] = useState<GenerationOptions>({\n    alphabets: [],\n    length: 20,\n    animation: true,\n  })\n  const [combinedAlphabets, setCombinedAlphabets] = useState('')\n  const { temporaryText } = useRevealAnimation({\n    alphabet: combinedAlphabets,\n    text: password,\n  })\n\n  useEffect(() => {\n    setCombinedAlphabets(combineAlphabets(options.alphabets))\n  }, [options.alphabets])\n\n  return (\n    <Container>\n      <Title>\n        <span role=\"img\" aria-label=\"Key Icon\">\n          ð\n        </span>\n        &nbsp; Password Generator\n      </Title>\n      <SubTitle>Length: {options.length} </SubTitle>\n      <Slider\n        value={options.length}\n        onChange={(length: number) =>\n          setOptions(options => ({ ...options, length }))\n        }\n      />\n      <SubTitle>Characters:</SubTitle>\n      {availableAlphabets.map(alphabet => (\n        <InputGroup key={alphabet.label}>\n          <Checkbox\n            label={alphabet.label}\n            onChange={(checked: boolean) => {\n              const newAlphabets = checked\n                ? [...options.alphabets, alphabet.value]\n                : options.alphabets.filter(a => a !== alphabet.value)\n\n              setOptions(options => ({ ...options, alphabets: newAlphabets }))\n            }}\n          />\n        </InputGroup>\n      ))}\n      <SubTitle>Options:</SubTitle>\n      <InputGroup>\n        <Checkbox\n          label=\"Animation\"\n          onChange={(checked: boolean) =>\n            setOptions(options => ({ ...options, animation: checked }))\n          }\n          checked\n        />\n      </InputGroup>\n      <GenerateButton\n        type=\"submit\"\n        disabled={options.alphabets.length === 0}\n        onClick={() => setPassword(getRandomPassword(options))}\n      >\n        Generate\n      </GenerateButton>\n      <Result\n        text={password}\n        displayText={options.animation ? temporaryText : password}\n      />\n    </Container>\n  )\n}\n\nexport default App\n","import { useEffect, useState } from 'react'\n\nimport { getRandomChar } from '../utils'\n\nexport type RevealAnimationParams = {\n  alphabet: string\n  text: string\n}\n\nexport type RevealAnimationReturn = {\n  temporaryText: string\n}\n\nexport function useRevealAnimation({\n  alphabet,\n  text,\n}: RevealAnimationParams): RevealAnimationReturn {\n  const [temporaryText, setTemporaryText] = useState('')\n\n  useEffect(() => {\n    let charIndex = 0\n\n    if (text) {\n      const shuffleInterval = setInterval(() => {\n        if (charIndex > text.length) {\n          clearInterval(shuffleInterval)\n          return\n        }\n\n        const newTemporaryText = [...new Array(text.length)]\n          .map((empty, i) =>\n            i < charIndex ? text[i] : getRandomChar(alphabet),\n          )\n          .join('')\n\n        setTemporaryText(newTemporaryText)\n\n        charIndex++\n      }, 30)\n\n      return () => clearInterval(shuffleInterval)\n    }\n  }, [text, alphabet])\n\n  return {\n    temporaryText,\n  }\n}\n","import React from 'react'\nimport { css, Global } from '@emotion/react'\n\nexport const GlobalStyles: React.FC = () => (\n  <Global\n    styles={css`\n      @import url('https://fonts.googleapis.com/css?family=Rubik&display=swap');\n\n      * {\n        box-sizing: border-box;\n      }\n\n      html,\n      body {\n        margin: 0;\n        padding: 0;\n      }\n\n      body {\n        background-color: #f3f7f7;\n        font-family: 'Rubik', sans-serif;\n        color: #39424e;\n        font-size: 14px;\n      }\n    `}\n  />\n)\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { ThemeProvider } from '@emotion/react'\n\nimport App from './app'\nimport { GlobalStyles, theme } from './styles'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <GlobalStyles />\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n","import { Theme } from '@emotion/react'\n\nexport const theme: Theme = {\n  colors: {\n    primary: '#27A4CE',\n    primaryLight: '#f8fbfc',\n    primaryDark: '#53C0E4',\n    disabled: '#808080',\n  },\n}\n"],"sourceRoot":""}